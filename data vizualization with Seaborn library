{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30197,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import seaborn as sns\nsns.set()\nimport numpy as np\nimport pandas as pd\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-08T17:21:47.444640Z","iopub.execute_input":"2024-07-08T17:21:47.446639Z","iopub.status.idle":"2024-07-08T17:21:48.602918Z","shell.execute_reply.started":"2024-07-08T17:21:47.446508Z","shell.execute_reply":"2024-07-08T17:21:48.601913Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"data = np.random.multivariate_normal([0, 0], [[5, 2], [2, 2]], size=2000)\ndata = pd.DataFrame(data, columns=['x', 'y'])\nfor col in 'xy':\n    sns.kdeplot(data[col], shade=True)\n\n    ","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:21:48.605046Z","iopub.execute_input":"2024-07-08T17:21:48.605508Z","iopub.status.idle":"2024-07-08T17:21:48.969619Z","shell.execute_reply.started":"2024-07-08T17:21:48.605464Z","shell.execute_reply":"2024-07-08T17:21:48.968291Z"},"trusted":true},"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"sns.distplot(data['x'])\nsns.distplot(data['y']);","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:21:48.971350Z","iopub.execute_input":"2024-07-08T17:21:48.971854Z","iopub.status.idle":"2024-07-08T17:21:49.433002Z","shell.execute_reply.started":"2024-07-08T17:21:48.971810Z","shell.execute_reply":"2024-07-08T17:21:49.431714Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n/opt/conda/lib/python3.7/site-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n  warnings.warn(msg, FutureWarning)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":"#sns.kdeplot(data['carcrashes_df']);","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:23:57.425603Z","iopub.execute_input":"2024-07-08T17:23:57.426533Z","iopub.status.idle":"2024-07-08T17:23:57.443437Z","shell.execute_reply.started":"2024-07-08T17:23:57.426491Z","shell.execute_reply":"2024-07-08T17:23:57.442109Z"},"trusted":true},"execution_count":5,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_17/3042438871.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkdeplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'EncodedPixels'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'train_df' is not defined"],"ename":"NameError","evalue":"name 'train_df' is not defined","output_type":"error"}]},{"cell_type":"code","source":"with sns.axes_style('white'):\n    sns.jointplot(\"x\", \"y\", data, kind='kde');","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:24:43.793979Z","iopub.execute_input":"2024-07-08T17:24:43.794385Z","iopub.status.idle":"2024-07-08T17:24:45.531925Z","shell.execute_reply.started":"2024-07-08T17:24:43.794352Z","shell.execute_reply":"2024-07-08T17:24:45.530944Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y, data. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  FutureWarning\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x432 with 3 Axes>","image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"penguins=sns.load_dataset('penguins')\nsns.jointplot(x=\"x\", y=\"y\", data=penguins, kind=\"kde\")","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:24:48.763656Z","iopub.execute_input":"2024-07-08T17:24:48.764177Z","iopub.status.idle":"2024-07-08T17:25:08.846361Z","shell.execute_reply.started":"2024-07-08T17:24:48.764116Z","shell.execute_reply":"2024-07-08T17:25:08.844817Z"},"trusted":true},"execution_count":7,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mgaierror\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1349\u001b[0m                 h.request(req.get_method(), req.selector, req.data, headers,\n\u001b[0;32m-> 1350\u001b[0;31m                           encode_chunked=req.has_header('Transfer-encoding'))\n\u001b[0m\u001b[1;32m   1351\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# timeout error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, body, headers, encode_chunked)\u001b[0m\n\u001b[1;32m   1280\u001b[0m         \u001b[0;34m\"\"\"Send a complete request to the server.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1281\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_send_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencode_chunked\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1282\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_send_request\u001b[0;34m(self, method, url, body, headers, encode_chunked)\u001b[0m\n\u001b[1;32m   1326\u001b[0m             \u001b[0mbody\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_encode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'body'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1327\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mendheaders\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencode_chunked\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mencode_chunked\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1328\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mendheaders\u001b[0;34m(self, message_body, encode_chunked)\u001b[0m\n\u001b[1;32m   1275\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mCannotSendHeader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1276\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_send_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage_body\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencode_chunked\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mencode_chunked\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1277\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_send_output\u001b[0;34m(self, message_body, encode_chunked)\u001b[0m\n\u001b[1;32m   1035\u001b[0m         \u001b[0;32mdel\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_buffer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1036\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1037\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    975\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mauto_open\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 976\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    977\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mconnect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1442\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1443\u001b[0;31m             \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1444\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mconnect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    947\u001b[0m         self.sock = self._create_connection(\n\u001b[0;32m--> 948\u001b[0;31m             (self.host,self.port), self.timeout, self.source_address)\n\u001b[0m\u001b[1;32m    949\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetsockopt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIPPROTO_TCP\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTCP_NODELAY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mcreate_connection\u001b[0;34m(address, timeout, source_address)\u001b[0m\n\u001b[1;32m    706\u001b[0m     \u001b[0merr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 707\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mres\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgetaddrinfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhost\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mport\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSOCK_STREAM\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    708\u001b[0m         \u001b[0maf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msocktype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproto\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcanonname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msa\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mgetaddrinfo\u001b[0;34m(host, port, family, type, proto, flags)\u001b[0m\n\u001b[1;32m    751\u001b[0m     \u001b[0maddrlist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 752\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mres\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_socket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetaddrinfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhost\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mport\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfamily\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproto\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    753\u001b[0m         \u001b[0maf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msocktype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproto\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcanonname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msa\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mgaierror\u001b[0m: [Errno -3] Temporary failure in name resolution","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mURLError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_17/244213541.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpenguins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'penguins'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjointplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"x\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpenguins\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"kde\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/seaborn/utils.py\u001b[0m in \u001b[0;36mload_dataset\u001b[0;34m(name, cache, data_home, **kws)\u001b[0m\n\u001b[1;32m    592\u001b[0m         \u001b[0mcache_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mget_data_home\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_home\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbasename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    593\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcache_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 594\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mget_dataset_names\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    595\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"'{name}' is not one of the example datasets.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    596\u001b[0m             \u001b[0murlretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcache_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/seaborn/utils.py\u001b[0m in \u001b[0;36mget_dataset_names\u001b[0;34m()\u001b[0m\n\u001b[1;32m    518\u001b[0m     \"\"\"\n\u001b[1;32m    519\u001b[0m     \u001b[0murl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"https://github.com/mwaskom/seaborn-data\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 520\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0murlopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    521\u001b[0m         \u001b[0mhtml\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    522\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(url, data, timeout, cafile, capath, cadefault, context)\u001b[0m\n\u001b[1;32m    220\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    221\u001b[0m         \u001b[0mopener\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_opener\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 222\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mopener\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    223\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0minstall_opener\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopener\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    523\u001b[0m             \u001b[0mreq\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmeth\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    527\u001b[0m         \u001b[0;31m# post-process response\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    541\u001b[0m         \u001b[0mprotocol\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    545\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    501\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhandler\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhandlers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    505\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mhttps_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1395\u001b[0m         \u001b[0mhttps_request\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAbstractHTTPHandler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_request_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1350\u001b[0m                           encode_chunked=req.has_header('Transfer-encoding'))\n\u001b[1;32m   1351\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# timeout error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1352\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1353\u001b[0m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mURLError\u001b[0m: <urlopen error [Errno -3] Temporary failure in name resolution>"],"ename":"URLError","evalue":"<urlopen error [Errno -3] Temporary failure in name resolution>","output_type":"error"}]},{"cell_type":"code","source":"\nsns.set_theme(style=\"ticks\")\n\n# Load the penguins dataset\npenguins = sns.load_dataset(\"penguins\")\n\n# Show the joint distribution using kernel density estimation\ng = sns.jointplot(\n    data=penguins,\n    x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\",\n    kind=\"kde\",\n)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:25:20.617979Z","iopub.execute_input":"2024-07-08T17:25:20.618406Z","iopub.status.idle":"2024-07-08T17:25:40.688207Z","shell.execute_reply.started":"2024-07-08T17:25:20.618371Z","shell.execute_reply":"2024-07-08T17:25:40.686566Z"},"trusted":true},"execution_count":8,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mgaierror\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1349\u001b[0m                 h.request(req.get_method(), req.selector, req.data, headers,\n\u001b[0;32m-> 1350\u001b[0;31m                           encode_chunked=req.has_header('Transfer-encoding'))\n\u001b[0m\u001b[1;32m   1351\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# timeout error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, body, headers, encode_chunked)\u001b[0m\n\u001b[1;32m   1280\u001b[0m         \u001b[0;34m\"\"\"Send a complete request to the server.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1281\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_send_request\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencode_chunked\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1282\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_send_request\u001b[0;34m(self, method, url, body, headers, encode_chunked)\u001b[0m\n\u001b[1;32m   1326\u001b[0m             \u001b[0mbody\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_encode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'body'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1327\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mendheaders\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencode_chunked\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mencode_chunked\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1328\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mendheaders\u001b[0;34m(self, message_body, encode_chunked)\u001b[0m\n\u001b[1;32m   1275\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mCannotSendHeader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1276\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_send_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage_body\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencode_chunked\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mencode_chunked\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1277\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_send_output\u001b[0;34m(self, message_body, encode_chunked)\u001b[0m\n\u001b[1;32m   1035\u001b[0m         \u001b[0;32mdel\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_buffer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1036\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1037\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    975\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mauto_open\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 976\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    977\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mconnect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1442\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1443\u001b[0;31m             \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1444\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mconnect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    947\u001b[0m         self.sock = self._create_connection(\n\u001b[0;32m--> 948\u001b[0;31m             (self.host,self.port), self.timeout, self.source_address)\n\u001b[0m\u001b[1;32m    949\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetsockopt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIPPROTO_TCP\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTCP_NODELAY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mcreate_connection\u001b[0;34m(address, timeout, source_address)\u001b[0m\n\u001b[1;32m    706\u001b[0m     \u001b[0merr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 707\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mres\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgetaddrinfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhost\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mport\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSOCK_STREAM\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    708\u001b[0m         \u001b[0maf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msocktype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproto\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcanonname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msa\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mgetaddrinfo\u001b[0;34m(host, port, family, type, proto, flags)\u001b[0m\n\u001b[1;32m    751\u001b[0m     \u001b[0maddrlist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 752\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mres\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_socket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetaddrinfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhost\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mport\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfamily\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproto\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    753\u001b[0m         \u001b[0maf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msocktype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproto\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcanonname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msa\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mgaierror\u001b[0m: [Errno -3] Temporary failure in name resolution","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mURLError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_17/843492983.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Load the penguins dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mpenguins\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"penguins\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Show the joint distribution using kernel density estimation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/seaborn/utils.py\u001b[0m in \u001b[0;36mload_dataset\u001b[0;34m(name, cache, data_home, **kws)\u001b[0m\n\u001b[1;32m    592\u001b[0m         \u001b[0mcache_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mget_data_home\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_home\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbasename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    593\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcache_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 594\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mget_dataset_names\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    595\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"'{name}' is not one of the example datasets.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    596\u001b[0m             \u001b[0murlretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcache_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/seaborn/utils.py\u001b[0m in \u001b[0;36mget_dataset_names\u001b[0;34m()\u001b[0m\n\u001b[1;32m    518\u001b[0m     \"\"\"\n\u001b[1;32m    519\u001b[0m     \u001b[0murl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"https://github.com/mwaskom/seaborn-data\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 520\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0murlopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    521\u001b[0m         \u001b[0mhtml\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    522\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(url, data, timeout, cafile, capath, cadefault, context)\u001b[0m\n\u001b[1;32m    220\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    221\u001b[0m         \u001b[0mopener\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_opener\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 222\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mopener\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    223\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0minstall_opener\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopener\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    523\u001b[0m             \u001b[0mreq\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmeth\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    527\u001b[0m         \u001b[0;31m# post-process response\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    541\u001b[0m         \u001b[0mprotocol\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    545\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    501\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhandler\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhandlers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    505\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mhttps_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1395\u001b[0m         \u001b[0mhttps_request\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAbstractHTTPHandler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_request_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1350\u001b[0m                           encode_chunked=req.has_header('Transfer-encoding'))\n\u001b[1;32m   1351\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# timeout error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1352\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1353\u001b[0m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mURLError\u001b[0m: <urlopen error [Errno -3] Temporary failure in name resolution>"],"ename":"URLError","evalue":"<urlopen error [Errno -3] Temporary failure in name resolution>","output_type":"error"}]},{"cell_type":"code","source":"tips=sns.load_dataset(\"tips\")\ntips.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:21:49.607384Z","iopub.status.idle":"2024-07-08T17:21:49.608311Z","shell.execute_reply.started":"2024-07-08T17:21:49.607991Z","shell.execute_reply":"2024-07-08T17:21:49.608037Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips)","metadata":{"execution":{"iopub.status.busy":"2024-07-08T17:21:49.610123Z","iopub.status.idle":"2024-07-08T17:21:49.611005Z","shell.execute_reply.started":"2024-07-08T17:21:49.610700Z","shell.execute_reply":"2024-07-08T17:21:49.610740Z"},"trusted":true},"execution_count":null,"outputs":[]}]}